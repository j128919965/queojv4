// Code generated by goctl. DO NOT EDIT!
// Source: ask.proto

package askclient

import (
	"context"

	"queoj/service/ask/ask"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	AskByIdReq   = ask.AskByIdReq
	AskDetail    = ask.AskDetail
	AskList      = ask.AskList
	AskSummary   = ask.AskSummary
	Empty        = ask.Empty
	ReplyByIdReq = ask.ReplyByIdReq
	ReplyDetail  = ask.ReplyDetail
	ReplyList    = ask.ReplyList

	Ask interface {
		GetAskById(ctx context.Context, in *AskByIdReq) (*AskDetail, error)
		GetAllAsk(ctx context.Context, in *Empty) (*AskList, error)
		GetReplyByAskId(ctx context.Context, in *AskByIdReq) (*ReplyList, error)
		AddAsk(ctx context.Context, in *AskDetail) (*Empty, error)
		EditAsk(ctx context.Context, in *AskDetail) (*Empty, error)
		AddReply(ctx context.Context, in *ReplyDetail) (*Empty, error)
		EditReply(ctx context.Context, in *ReplyDetail) (*Empty, error)
		RemoveAsk(ctx context.Context, in *AskByIdReq) (*Empty, error)
		RemoveReply(ctx context.Context, in *ReplyByIdReq) (*Empty, error)
	}

	defaultAsk struct {
		cli zrpc.Client
	}
)

func NewAsk(cli zrpc.Client) Ask {
	return &defaultAsk{
		cli: cli,
	}
}

func (m *defaultAsk) GetAskById(ctx context.Context, in *AskByIdReq) (*AskDetail, error) {
	client := ask.NewAskClient(m.cli.Conn())
	return client.GetAskById(ctx, in)
}

func (m *defaultAsk) GetAllAsk(ctx context.Context, in *Empty) (*AskList, error) {
	client := ask.NewAskClient(m.cli.Conn())
	return client.GetAllAsk(ctx, in)
}

func (m *defaultAsk) GetReplyByAskId(ctx context.Context, in *AskByIdReq) (*ReplyList, error) {
	client := ask.NewAskClient(m.cli.Conn())
	return client.GetReplyByAskId(ctx, in)
}

func (m *defaultAsk) AddAsk(ctx context.Context, in *AskDetail) (*Empty, error) {
	client := ask.NewAskClient(m.cli.Conn())
	return client.AddAsk(ctx, in)
}

func (m *defaultAsk) EditAsk(ctx context.Context, in *AskDetail) (*Empty, error) {
	client := ask.NewAskClient(m.cli.Conn())
	return client.EditAsk(ctx, in)
}

func (m *defaultAsk) AddReply(ctx context.Context, in *ReplyDetail) (*Empty, error) {
	client := ask.NewAskClient(m.cli.Conn())
	return client.AddReply(ctx, in)
}

func (m *defaultAsk) EditReply(ctx context.Context, in *ReplyDetail) (*Empty, error) {
	client := ask.NewAskClient(m.cli.Conn())
	return client.EditReply(ctx, in)
}

func (m *defaultAsk) RemoveAsk(ctx context.Context, in *AskByIdReq) (*Empty, error) {
	client := ask.NewAskClient(m.cli.Conn())
	return client.RemoveAsk(ctx, in)
}

func (m *defaultAsk) RemoveReply(ctx context.Context, in *ReplyByIdReq) (*Empty, error) {
	client := ask.NewAskClient(m.cli.Conn())
	return client.RemoveReply(ctx, in)
}
