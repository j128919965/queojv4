// Code generated by goctl. DO NOT EDIT!
// Source: message.proto

package messageclient

import (
	"context"

	"queoj/service/message/message"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	Empty                = message.Empty
	HasNoReadReq         = message.HasNoReadReq
	HasNoReadResp        = message.HasNoReadResp
	MessageByIdReq       = message.MessageByIdReq
	MessageByUserIdReq   = message.MessageByUserIdReq
	MessageDto           = message.MessageDto
	MessagePage          = message.MessagePage
	MessageReqByReceiver = message.MessageReqByReceiver
	PageRequest          = message.PageRequest

	Message interface {
		GetMessagePage(ctx context.Context, in *MessageReqByReceiver) (*MessagePage, error)
		ReadMsg(ctx context.Context, in *MessageByIdReq) (*Empty, error)
		ReadAllMsg(ctx context.Context, in *MessageByUserIdReq) (*Empty, error)
		GetMessageById(ctx context.Context, in *MessageByIdReq) (*MessageDto, error)
		SendMessage(ctx context.Context, in *MessageDto) (*Empty, error)
		DeleteMsg(ctx context.Context, in *MessageByIdReq) (*Empty, error)
		DeleteAllMsg(ctx context.Context, in *MessageByUserIdReq) (*Empty, error)
	}

	defaultMessage struct {
		cli zrpc.Client
	}
)

func NewMessage(cli zrpc.Client) Message {
	return &defaultMessage{
		cli: cli,
	}
}

func (m *defaultMessage) GetMessagePage(ctx context.Context, in *MessageReqByReceiver) (*MessagePage, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.GetMessagePage(ctx, in)
}

func (m *defaultMessage) ReadMsg(ctx context.Context, in *MessageByIdReq) (*Empty, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.ReadMsg(ctx, in)
}

func (m *defaultMessage) ReadAllMsg(ctx context.Context, in *MessageByUserIdReq) (*Empty, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.ReadAllMsg(ctx, in)
}

func (m *defaultMessage) GetMessageById(ctx context.Context, in *MessageByIdReq) (*MessageDto, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.GetMessageById(ctx, in)
}

func (m *defaultMessage) SendMessage(ctx context.Context, in *MessageDto) (*Empty, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.SendMessage(ctx, in)
}

func (m *defaultMessage) DeleteMsg(ctx context.Context, in *MessageByIdReq) (*Empty, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.DeleteMsg(ctx, in)
}

func (m *defaultMessage) DeleteAllMsg(ctx context.Context, in *MessageByUserIdReq) (*Empty, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.DeleteAllMsg(ctx, in)
}
