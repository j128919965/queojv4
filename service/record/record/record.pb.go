// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: record.proto

package record

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{0}
}

type RecordDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid       uint64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Time      uint64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Pid       int32  `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	Language  uint32 `protobuf:"varint,5,opt,name=language,proto3" json:"language,omitempty"`
	Status    uint32 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	TimeUsed  uint64 `protobuf:"varint,7,opt,name=timeUsed,proto3" json:"timeUsed,omitempty"`
	SpaceUsed uint64 `protobuf:"varint,8,opt,name=spaceUsed,proto3" json:"spaceUsed,omitempty"`
	Code      string `protobuf:"bytes,9,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *RecordDetail) Reset() {
	*x = RecordDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDetail) ProtoMessage() {}

func (x *RecordDetail) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDetail.ProtoReflect.Descriptor instead.
func (*RecordDetail) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1}
}

func (x *RecordDetail) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecordDetail) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *RecordDetail) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RecordDetail) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *RecordDetail) GetLanguage() uint32 {
	if x != nil {
		return x.Language
	}
	return 0
}

func (x *RecordDetail) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RecordDetail) GetTimeUsed() uint64 {
	if x != nil {
		return x.TimeUsed
	}
	return 0
}

func (x *RecordDetail) GetSpaceUsed() uint64 {
	if x != nil {
		return x.SpaceUsed
	}
	return 0
}

func (x *RecordDetail) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type RecordState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RecordState) Reset() {
	*x = RecordState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordState) ProtoMessage() {}

func (x *RecordState) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordState.ProtoReflect.Descriptor instead.
func (*RecordState) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{2}
}

func (x *RecordState) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type RecordList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*RecordDetail `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *RecordList) Reset() {
	*x = RecordList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordList) ProtoMessage() {}

func (x *RecordList) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordList.ProtoReflect.Descriptor instead.
func (*RecordList) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{3}
}

func (x *RecordList) GetRecords() []*RecordDetail {
	if x != nil {
		return x.Records
	}
	return nil
}

type RecordByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RecordByIdReq) Reset() {
	*x = RecordByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordByIdReq) ProtoMessage() {}

func (x *RecordByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordByIdReq.ProtoReflect.Descriptor instead.
func (*RecordByIdReq) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{4}
}

func (x *RecordByIdReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RecordByUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *RecordByUserReq) Reset() {
	*x = RecordByUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordByUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordByUserReq) ProtoMessage() {}

func (x *RecordByUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordByUserReq.ProtoReflect.Descriptor instead.
func (*RecordByUserReq) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{5}
}

func (x *RecordByUserReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SuccessStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Easy   int32 `protobuf:"varint,1,opt,name=easy,proto3" json:"easy,omitempty"`
	Medium int32 `protobuf:"varint,2,opt,name=medium,proto3" json:"medium,omitempty"`
	Hard   int32 `protobuf:"varint,3,opt,name=hard,proto3" json:"hard,omitempty"`
}

func (x *SuccessStatistic) Reset() {
	*x = SuccessStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessStatistic) ProtoMessage() {}

func (x *SuccessStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessStatistic.ProtoReflect.Descriptor instead.
func (*SuccessStatistic) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{6}
}

func (x *SuccessStatistic) GetEasy() int32 {
	if x != nil {
		return x.Easy
	}
	return 0
}

func (x *SuccessStatistic) GetMedium() int32 {
	if x != nil {
		return x.Medium
	}
	return 0
}

func (x *SuccessStatistic) GetHard() int32 {
	if x != nil {
		return x.Hard
	}
	return 0
}

var File_record_proto protoreflect.FileDescriptor

var file_record_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x25, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x1f, 0x0a, 0x0d, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x0f,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x10, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x61, 0x73, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x65, 0x61, 0x73, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x72, 0x64, 0x32, 0x89, 0x03, 0x0a, 0x06,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x4a, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x1b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x49, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a,
	0x17, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x1d, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x42, 0x08, 0x5a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_record_proto_rawDescOnce sync.Once
	file_record_proto_rawDescData = file_record_proto_rawDesc
)

func file_record_proto_rawDescGZIP() []byte {
	file_record_proto_rawDescOnce.Do(func() {
		file_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_record_proto_rawDescData)
	})
	return file_record_proto_rawDescData
}

var file_record_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_record_proto_goTypes = []interface{}{
	(*Empty)(nil),            // 0: recordclient.Empty
	(*RecordDetail)(nil),     // 1: recordclient.RecordDetail
	(*RecordState)(nil),      // 2: recordclient.RecordState
	(*RecordList)(nil),       // 3: recordclient.RecordList
	(*RecordByIdReq)(nil),    // 4: recordclient.RecordByIdReq
	(*RecordByUserReq)(nil),  // 5: recordclient.RecordByUserReq
	(*SuccessStatistic)(nil), // 6: recordclient.SuccessStatistic
}
var file_record_proto_depIdxs = []int32{
	1, // 0: recordclient.RecordList.records:type_name -> recordclient.RecordDetail
	5, // 1: recordclient.Record.getRecordByUser:input_type -> recordclient.RecordByUserReq
	4, // 2: recordclient.Record.getRecordById:input_type -> recordclient.RecordByIdReq
	1, // 3: recordclient.Record.addRecord:input_type -> recordclient.RecordDetail
	4, // 4: recordclient.Record.getRecordStatus:input_type -> recordclient.RecordByIdReq
	5, // 5: recordclient.Record.getUserSuccessStatistic:input_type -> recordclient.RecordByUserReq
	3, // 6: recordclient.Record.getRecordByUser:output_type -> recordclient.RecordList
	1, // 7: recordclient.Record.getRecordById:output_type -> recordclient.RecordDetail
	4, // 8: recordclient.Record.addRecord:output_type -> recordclient.RecordByIdReq
	2, // 9: recordclient.Record.getRecordStatus:output_type -> recordclient.RecordState
	6, // 10: recordclient.Record.getUserSuccessStatistic:output_type -> recordclient.SuccessStatistic
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_record_proto_init() }
func file_record_proto_init() {
	if File_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordByUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_record_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_record_proto_goTypes,
		DependencyIndexes: file_record_proto_depIdxs,
		MessageInfos:      file_record_proto_msgTypes,
	}.Build()
	File_record_proto = out.File
	file_record_proto_rawDesc = nil
	file_record_proto_goTypes = nil
	file_record_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RecordClient is the client API for Record service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecordClient interface {
	GetRecordByUser(ctx context.Context, in *RecordByUserReq, opts ...grpc.CallOption) (*RecordList, error)
	GetRecordById(ctx context.Context, in *RecordByIdReq, opts ...grpc.CallOption) (*RecordDetail, error)
	AddRecord(ctx context.Context, in *RecordDetail, opts ...grpc.CallOption) (*RecordByIdReq, error)
	GetRecordStatus(ctx context.Context, in *RecordByIdReq, opts ...grpc.CallOption) (*RecordState, error)
	GetUserSuccessStatistic(ctx context.Context, in *RecordByUserReq, opts ...grpc.CallOption) (*SuccessStatistic, error)
}

type recordClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordClient(cc grpc.ClientConnInterface) RecordClient {
	return &recordClient{cc}
}

func (c *recordClient) GetRecordByUser(ctx context.Context, in *RecordByUserReq, opts ...grpc.CallOption) (*RecordList, error) {
	out := new(RecordList)
	err := c.cc.Invoke(ctx, "/recordclient.Record/getRecordByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) GetRecordById(ctx context.Context, in *RecordByIdReq, opts ...grpc.CallOption) (*RecordDetail, error) {
	out := new(RecordDetail)
	err := c.cc.Invoke(ctx, "/recordclient.Record/getRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) AddRecord(ctx context.Context, in *RecordDetail, opts ...grpc.CallOption) (*RecordByIdReq, error) {
	out := new(RecordByIdReq)
	err := c.cc.Invoke(ctx, "/recordclient.Record/addRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) GetRecordStatus(ctx context.Context, in *RecordByIdReq, opts ...grpc.CallOption) (*RecordState, error) {
	out := new(RecordState)
	err := c.cc.Invoke(ctx, "/recordclient.Record/getRecordStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) GetUserSuccessStatistic(ctx context.Context, in *RecordByUserReq, opts ...grpc.CallOption) (*SuccessStatistic, error) {
	out := new(SuccessStatistic)
	err := c.cc.Invoke(ctx, "/recordclient.Record/getUserSuccessStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordServer is the server API for Record service.
type RecordServer interface {
	GetRecordByUser(context.Context, *RecordByUserReq) (*RecordList, error)
	GetRecordById(context.Context, *RecordByIdReq) (*RecordDetail, error)
	AddRecord(context.Context, *RecordDetail) (*RecordByIdReq, error)
	GetRecordStatus(context.Context, *RecordByIdReq) (*RecordState, error)
	GetUserSuccessStatistic(context.Context, *RecordByUserReq) (*SuccessStatistic, error)
}

// UnimplementedRecordServer can be embedded to have forward compatible implementations.
type UnimplementedRecordServer struct {
}

func (*UnimplementedRecordServer) GetRecordByUser(context.Context, *RecordByUserReq) (*RecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordByUser not implemented")
}
func (*UnimplementedRecordServer) GetRecordById(context.Context, *RecordByIdReq) (*RecordDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordById not implemented")
}
func (*UnimplementedRecordServer) AddRecord(context.Context, *RecordDetail) (*RecordByIdReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}
func (*UnimplementedRecordServer) GetRecordStatus(context.Context, *RecordByIdReq) (*RecordState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordStatus not implemented")
}
func (*UnimplementedRecordServer) GetUserSuccessStatistic(context.Context, *RecordByUserReq) (*SuccessStatistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSuccessStatistic not implemented")
}

func RegisterRecordServer(s *grpc.Server, srv RecordServer) {
	s.RegisterService(&_Record_serviceDesc, srv)
}

func _Record_GetRecordByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GetRecordByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordclient.Record/GetRecordByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GetRecordByUser(ctx, req.(*RecordByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_GetRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GetRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordclient.Record/GetRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GetRecordById(ctx, req.(*RecordByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordclient.Record/AddRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).AddRecord(ctx, req.(*RecordDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_GetRecordStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GetRecordStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordclient.Record/GetRecordStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GetRecordStatus(ctx, req.(*RecordByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_GetUserSuccessStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GetUserSuccessStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordclient.Record/GetUserSuccessStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GetUserSuccessStatistic(ctx, req.(*RecordByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Record_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recordclient.Record",
	HandlerType: (*RecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getRecordByUser",
			Handler:    _Record_GetRecordByUser_Handler,
		},
		{
			MethodName: "getRecordById",
			Handler:    _Record_GetRecordById_Handler,
		},
		{
			MethodName: "addRecord",
			Handler:    _Record_AddRecord_Handler,
		},
		{
			MethodName: "getRecordStatus",
			Handler:    _Record_GetRecordStatus_Handler,
		},
		{
			MethodName: "getUserSuccessStatistic",
			Handler:    _Record_GetUserSuccessStatistic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "record.proto",
}
