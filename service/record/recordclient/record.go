// Code generated by goctl. DO NOT EDIT!
// Source: record.proto

package recordclient

import (
	"context"

	"queoj/service/record/record"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	Empty            = record.Empty
	RecordByIdReq    = record.RecordByIdReq
	RecordByUserReq  = record.RecordByUserReq
	RecordDetail     = record.RecordDetail
	RecordList       = record.RecordList
	RecordState      = record.RecordState
	SuccessStatistic = record.SuccessStatistic

	Record interface {
		GetRecordByUser(ctx context.Context, in *RecordByUserReq) (*RecordList, error)
		GetRecordById(ctx context.Context, in *RecordByIdReq) (*RecordDetail, error)
		AddRecord(ctx context.Context, in *RecordDetail) (*RecordByIdReq, error)
		GetRecordStatus(ctx context.Context, in *RecordByIdReq) (*RecordState, error)
		GetUserSuccessStatistic(ctx context.Context, in *RecordByUserReq) (*SuccessStatistic, error)
	}

	defaultRecord struct {
		cli zrpc.Client
	}
)

func NewRecord(cli zrpc.Client) Record {
	return &defaultRecord{
		cli: cli,
	}
}

func (m *defaultRecord) GetRecordByUser(ctx context.Context, in *RecordByUserReq) (*RecordList, error) {
	client := record.NewRecordClient(m.cli.Conn())
	return client.GetRecordByUser(ctx, in)
}

func (m *defaultRecord) GetRecordById(ctx context.Context, in *RecordByIdReq) (*RecordDetail, error) {
	client := record.NewRecordClient(m.cli.Conn())
	return client.GetRecordById(ctx, in)
}

func (m *defaultRecord) AddRecord(ctx context.Context, in *RecordDetail) (*RecordByIdReq, error) {
	client := record.NewRecordClient(m.cli.Conn())
	return client.AddRecord(ctx, in)
}

func (m *defaultRecord) GetRecordStatus(ctx context.Context, in *RecordByIdReq) (*RecordState, error) {
	client := record.NewRecordClient(m.cli.Conn())
	return client.GetRecordStatus(ctx, in)
}

func (m *defaultRecord) GetUserSuccessStatistic(ctx context.Context, in *RecordByUserReq) (*SuccessStatistic, error) {
	client := record.NewRecordClient(m.cli.Conn())
	return client.GetUserSuccessStatistic(ctx, in)
}
