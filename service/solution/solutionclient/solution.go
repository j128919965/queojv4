// Code generated by goctl. DO NOT EDIT!
// Source: solution.proto

package solutionclient

import (
	"context"

	"queoj/service/solution/solution"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	AllSolutionByPidReq = solution.AllSolutionByPidReq
	Empty               = solution.Empty
	SolutionAddReq      = solution.SolutionAddReq
	SolutionByIdReq     = solution.SolutionByIdReq
	SolutionDetail      = solution.SolutionDetail
	SolutionList        = solution.SolutionList
	SolutionSummary     = solution.SolutionSummary

	Solution interface {
		GetSolutionDetail(ctx context.Context, in *SolutionByIdReq) (*SolutionDetail, error)
		GetAllSolutionByPid(ctx context.Context, in *AllSolutionByPidReq) (*SolutionList, error)
		AddSolution(ctx context.Context, in *SolutionAddReq) (*Empty, error)
	}

	defaultSolution struct {
		cli zrpc.Client
	}
)

func NewSolution(cli zrpc.Client) Solution {
	return &defaultSolution{
		cli: cli,
	}
}

func (m *defaultSolution) GetSolutionDetail(ctx context.Context, in *SolutionByIdReq) (*SolutionDetail, error) {
	client := solution.NewSolutionClient(m.cli.Conn())
	return client.GetSolutionDetail(ctx, in)
}

func (m *defaultSolution) GetAllSolutionByPid(ctx context.Context, in *AllSolutionByPidReq) (*SolutionList, error) {
	client := solution.NewSolutionClient(m.cli.Conn())
	return client.GetAllSolutionByPid(ctx, in)
}

func (m *defaultSolution) AddSolution(ctx context.Context, in *SolutionAddReq) (*Empty, error) {
	client := solution.NewSolutionClient(m.cli.Conn())
	return client.AddSolution(ctx, in)
}
