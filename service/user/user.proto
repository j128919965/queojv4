syntax = "proto3";

package userclient;

option go_package = "user";

message Result {
  bool success = 1;
}

message Tokens {
  string accessToken = 1;
  string refreshToken = 2;
}

message UserInfo {
  uint64 id = 1;
  optional string nickname = 2;
  optional string favicon = 3;
  optional string phone = 4;
  string email = 5;
  int32 coins = 6;
  int32 point = 7;
  optional string introduction = 8;
  optional string github = 9;
  optional string website = 10;
  optional string wechat = 11;
}

message LoginResult {
  UserInfo info = 1;
  Tokens tokens = 2;
  bool isNewUser = 3;
}

message LoginByPasswordReq {
  string email = 1;
  string password = 2;
}

message LoginByCodeReq {
  string email = 1;
  string code = 2;
}

message UserInfoReqByEmail {
  string email = 1;
}

// 优先根据userId查询，如果userId为空，则依据email
message UserInfoReq {
  optional uint64 userId = 1;
  optional string email =2;
}

message ChangeUserInfoReq {
  uint64 userId = 1;
  optional string nickname = 2;
  optional string favicon = 3;
  optional string phone = 4;
  optional string introduction = 5;
  optional string github = 6;
  optional string website = 7;
  optional string wechat = 8;
}

message ChangePasswordReq {
  string new = 1;
  string code = 2;
  uint64 id = 3;
}

message AddCoinOrPointReq {
  uint64 userId = 1;
  int32 coins = 2;
  int32 points = 3;
  string reason = 4;
}

message RefreshReq {
  string refreshToken = 1;
}

message RankByUserIdReq {
  uint64 id = 1;
}

message UserRank {
  int32 value = 1;
}

service User {
  rpc LoginByPassword(LoginByPasswordReq) returns(LoginResult);
  rpc LoginByCode(LoginByCodeReq) returns(LoginResult);

  rpc AddCoinOrPoint(AddCoinOrPointReq) returns (Result);
  rpc ChangeUserInfo(ChangeUserInfoReq) returns (Result);
  rpc ChangePassword(ChangePasswordReq) returns (Result);
  rpc GetUserRank(RankByUserIdReq) returns (UserRank);

  rpc GetUserInfo(UserInfoReq) returns (UserInfo);

  rpc SendVerifyEmail(UserInfoReqByEmail) returns (Result);

  rpc RefreshToken(RefreshReq) returns (Tokens);
}