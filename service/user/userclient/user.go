// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userclient

import (
	"context"

	"queoj/service/user/user"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCoinOrPointReq  = user.AddCoinOrPointReq
	ChangePasswordReq  = user.ChangePasswordReq
	ChangeUserInfoReq  = user.ChangeUserInfoReq
	LoginByCodeReq     = user.LoginByCodeReq
	LoginByPasswordReq = user.LoginByPasswordReq
	LoginResult        = user.LoginResult
	RefreshReq         = user.RefreshReq
	Result             = user.Result
	Tokens             = user.Tokens
	UserInfo           = user.UserInfo
	UserInfoReq        = user.UserInfoReq
	UserInfoReqByEmail = user.UserInfoReqByEmail

	User interface {
		LoginByPassword(ctx context.Context, in *LoginByPasswordReq, opts ...grpc.CallOption) (*LoginResult, error)
		LoginByCode(ctx context.Context, in *LoginByCodeReq, opts ...grpc.CallOption) (*LoginResult, error)
		AddCoinOrPoint(ctx context.Context, in *AddCoinOrPointReq, opts ...grpc.CallOption) (*Result, error)
		ChangeUserInfo(ctx context.Context, in *ChangeUserInfoReq, opts ...grpc.CallOption) (*Result, error)
		ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*Result, error)
		GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfo, error)
		SendVerifyEmail(ctx context.Context, in *UserInfoReqByEmail, opts ...grpc.CallOption) (*Result, error)
		RefreshToken(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*Tokens, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) LoginByPassword(ctx context.Context, in *LoginByPasswordReq, opts ...grpc.CallOption) (*LoginResult, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.LoginByPassword(ctx, in, opts...)
}

func (m *defaultUser) LoginByCode(ctx context.Context, in *LoginByCodeReq, opts ...grpc.CallOption) (*LoginResult, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.LoginByCode(ctx, in, opts...)
}

func (m *defaultUser) AddCoinOrPoint(ctx context.Context, in *AddCoinOrPointReq, opts ...grpc.CallOption) (*Result, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.AddCoinOrPoint(ctx, in, opts...)
}

func (m *defaultUser) ChangeUserInfo(ctx context.Context, in *ChangeUserInfoReq, opts ...grpc.CallOption) (*Result, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.ChangeUserInfo(ctx, in, opts...)
}

func (m *defaultUser) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*Result, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}

func (m *defaultUser) GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfo, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUser) SendVerifyEmail(ctx context.Context, in *UserInfoReqByEmail, opts ...grpc.CallOption) (*Result, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SendVerifyEmail(ctx, in, opts...)
}

func (m *defaultUser) RefreshToken(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*Tokens, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.RefreshToken(ctx, in, opts...)
}
